# Reverse Integer

## Problem Statement
Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return `0`.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

## Examples

### Example 1:
**Input:**
```cpp
x = 123
```
**Output:**
```cpp
321
```

### Example 2:
**Input:**
```cpp
x = -123
```
**Output:**
```cpp
-321
```

### Example 3:
**Input:**
```cpp
x = 120
```
**Output:**
```cpp
21
```

## Constraints:
- -2^31 <= x <= 2^31 - 1

## Solution

### C++ Implementation
```cpp
#include <climits>

class Solution {
public:
    int reverse(int x) {
        int reverseNumber = 0;
        while (x != 0) {
            int lastDigit = x % 10;
            // Check for overflow before multiplying by 10
            if ((reverseNumber > INT_MAX / 10) || (reverseNumber < INT_MIN / 10)) {
                return 0;
            }
            reverseNumber = (reverseNumber * 10) + lastDigit;
            x = x / 10;
        }
        return reverseNumber;
    }
};
```

## Explanation
1. Initialize `reverseNumber` to 0.
2. Extract the last digit of `x` using `x % 10`.
3. Before multiplying `reverseNumber` by 10, check for potential overflow.
4. Multiply `reverseNumber` by 10 and add the last digit.
5. Reduce `x` by dividing it by 10.
6. Repeat until `x` becomes `0`.
7. Return the reversed number if it's within the 32-bit signed integer range; otherwise, return `0`.

## Complexity Analysis
- **Time Complexity:** O(log(x)), since the number is divided by 10 in each iteration.
- **Space Complexity:** O(1), as we use only a few integer variables.


