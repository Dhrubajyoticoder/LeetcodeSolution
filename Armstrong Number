# Armstrong Number

## Problem Statement
Given an integer `n`, return `true` if `n` is an Armstrong number, and `false` otherwise. An Armstrong number for a three-digit number is a number for which the sum of the cubes of its digits equals the number itself.

## Examples

### Example 1
**Input:**
```cpp
n = 153
```
**Output:**
```cpp
true
```
**Explanation:** 1³ + 5³ + 3³ = 153.

### Example 2
**Input:**
```cpp
n = 123
```
**Output:**
```cpp
false
```
**Explanation:** 1³ + 2³ + 3³ ≠ 123.

## Constraints:
- 100 <= n <= 999 (for three-digit Armstrong numbers)

## Solution

### C++ Implementation
```cpp
class Solution {
  public:
    bool armstrongNumber(int n) {
        int sum =  0;
        int dup = n;
        while (n > 0) {
            int lastDigit = n % 10;
            sum = sum + (lastDigit * lastDigit * lastDigit);
            n = n / 10;
        }
        return dup == sum;
    }
};
```

## Explanation
1. Initialize `sum` to `0` and store the original value of `n` in `dup`.
2. Extract the last digit of `n` using `n % 10`.
3. Cube the last digit and add it to `sum`.
4. Reduce `n` by dividing it by 10.
5. Repeat the process until `n` becomes `0`.
6. Compare `sum` with `dup` and return `true` if they are equal, otherwise return `false`.

## Complexity Analysis
- **Time Complexity:** O(log(n)), since the number is divided by 10 in each iteration.
- **Space Complexity:** O(1), as we use only a few integer variables.

